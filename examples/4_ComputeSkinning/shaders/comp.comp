#version 450

layout(local_size_x = 1) in;

struct VertexIn {
    vec4 pos;
    vec2 texCoord;
    uvec2 boneIDs;
    vec2 weights;
};

layout(binding = 0) readonly buffer Src {
VertexIn vertices[];
}
srcData;

struct VertexOut {
vec4 pos;
vec2 texCoord;
};

layout(binding = 1) buffer Dst {
VertexOut vertices[];
}
dstData;

layout(binding = 2) uniform Bones {
mat4 bones[2];
}
bonesUBO;

void main() {
uint idx = gl_GlobalInvocationID.x;
VertexIn vin = srcData.vertices[idx];
vec4 pos = vin.pos;
vec4 t0 = bonesUBO.bones[vin.boneIDs.x] * pos;
vec4 t1 = bonesUBO.bones[vin.boneIDs.y] * pos;
vec4 skinned = vin.weights.x * t0 + vin.weights.y * t1;
dstData.vertices[idx].pos = vec4(skinned.xyz, 1.0);
// dstData.vertices[idx].texCoord = vin.texCoord;
dstData.vertices[idx].pos = vin.pos;
}
